@model Web_UI.Models.VMTask

@{
    ViewBag.Title = "Edit";
}



<div class="form-horizontal col-md-12 detailView">
    <h2>@Html.DisplayFor(model => model.Title)</h2>
    <p>@Html.DisplayFor(model => model.Id)</p>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Priority, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Due date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DueDateDate, new { htmlAttributes = new { @class = "form-control dateControl", type = "text" } })
                @Html.ValidationMessageFor(model => model.DueDateDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Due time", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DueDateTime, new { htmlAttributes = new { @class = "form-control col-md-2", type = "text", onChange = "timeRex()" } })
                <label id="lblErrMsg" class="text-danger"></label>

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control", type = "DateTime", @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastChangedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastChangedDate, new { htmlAttributes = new { @class = "form-control", type = "DateTime", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.LastChangedDate, "", new { @class = "text-danger", type = "DateTime" })
            </div>
        </div>

        <div>
            @Html.ActionLink("Back", "Index","Project", new { id = Model.Id }, new { @class = "btn btn-primary" }) | <input type="submit" value="Save" class="btn btn-default" />
        </div>
    }
</div>


@section Scripts {
    @* Vallidates input *@
    @Scripts.Render("~/bundles/jqueryval")

    @* Large Text editor *@
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script type="text/javascript">
        var oldText = document.getElementById("Description").value;
        var editor = CKEDITOR.instances['Description'];
        if (editor) {
            editor.destroy(true);
        }
        CKEDITOR.replace('Description', {
            enterMode: CKEDITOR.ENTER_BR,
        });
        CKEDITOR.instances['Description'].setData(oldText);
    </script>

    @* Date "popup" picker *@
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script>
        $(".dateControl").datepicker({
            numberOfMonths: 3,
            showButtonPanel: true,
            dateFormat: 'mm-dd-yy',
        });
        function timeRex() {
            var strTime = document.getElementById("DueDateTime").value;
            var strDate = document.getElementById("DueDateDate").value;
            var errMsg;
            var re = new RegExp("^(?:0?[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$");
            if (strDate != "") {
                if (!re.test(strTime)) {
                    errMsg = "Time must be in exampel: 12:37 (hour:min:sek)";
                }
                else { errMsg = ""; }
                document.getElementById("lblErrMsg").innerHTML = errMsg;
            }
        }
    </script>
}
